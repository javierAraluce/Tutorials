
# Docker Robesafe Python TensorFlow 2.4 Cuda 11.0 cudnn8 nvidia 460.39
# Javier Araluce (RobeSafe research group - University of Alcal√°)

FROM ubuntu:20.04

LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"
ARG DEBIAN_FRONTEND=noninteractive

RUN apt update && apt install -y --no-install-recommends \
    dialog apt-utils \
    sudo \
    wget \
    bash \
    git \
    gcc-8 \
    g++-8 \
    gedit \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*


ENV CUDA_VERSION 11.0.3

RUN /bin/bash -c    'update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8; \
                    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8'

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
# Change cuda-compact-11-0 for cuda-11-0
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-11-0=11.0.221-1 \
    cuda-11-0=11.0.3-1\
    && ln -s cuda-11.0 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*


# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf
ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.0 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 brand=tesla,driver>=450,driver<451"



ENV NCCL_VERSION 2.8.4

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-11-0=11.0.3-1 \
    libnpp-11-0=11.1.0.245-1 \
    cuda-nvtx-11-0=11.0.167-1 \
    libcublas-11-0=11.2.0.252-1 \
    libcusparse-11-0=11.1.1.245-1 \
    libnccl2=$NCCL_VERSION-1+cuda11.0 \
    && rm -rf /var/lib/apt/lists/*

# apt from auto upgrading the cublas package. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold libcublas-11-0 libnccl2


ENV CUDNN_VERSION 8.0.5.39

LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn8=$CUDNN_VERSION-1+cuda11.0 \
    && apt-mark hold libcudnn8 && \
    rm -rf /var/lib/apt/lists/*


# # Python

# RUN apt update && apt install -y --no-install-recommends \
#     python3-dev python3-pip python3-venv && \
#     rm -rf /var/lib/apt/lists/*

# # Install code 
# RUN apt update && apt install -y --no-install-recommends \
#     software-properties-common apt-transport-https && \
#     wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add - && \
#     add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" && \
#     apt install -y --no-install-recommends code && \
#     rm -rf /var/lib/apt/lists/*                   



# ARG USER=docker_robesafe
# ARG UID=1000
# ARG GID=1000
# # default password for user
# ARG PW=robesafe23
# # Option1: Using unencrypted password/ specifying password
# RUN useradd -m ${USER} --uid=${UID} && echo "${USER}:${PW}" | \
#     chpasswd && \
#     usermod -aG sudo docker_robesafe

# USER docker_robesafe
# WORKDIR /home/docker_robesafe

# # Tensorflow 2.4
# RUN pip3 install --user tensorflow-gpu==2.4         && \
#     pip3 install --user matplotlib==3.3.4           && \
#     pip3 install --user pandas==1.2.3               && \
#     pip3 install --user nltk==3.5                   && \
#     pip3 install --user scikit-learn==0.24.1        && \
#     pip3 install --user imageio-ffmpeg==0.4.3       && \
#     pip3 install --user scikit-learn==0.24.1        && \
#     pip3 install --user tqdm==4.59.0                && \
#     pip3 install --user imageio==2.9.0

